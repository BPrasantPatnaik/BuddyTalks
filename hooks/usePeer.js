import { useSocket } from "@/context/socket"
import { useRouter } from "next/router"

const { useState, useEffect, useRef } = require("react")

const usePeer = () => { 
    const socket = useSocket() //this is to just ensure that if socket is connected then only we can use peer and have a peer connection
    const roomId = useRouter().query.roomid;

    const [peer, setPeer] = useState(null)
    const [myId, setMyId] = useState('')
    
    const isPeerSet = useRef(false)

    useEffect(() => {
        console.log("I am in the usePeerjs ",isPeerSet.current)
        console.log("Socket",socket)
        console.log("room id =",roomId)
        if (isPeerSet.current || !roomId || !socket) return;

        console.log("Creating a peer for the current user......")
        isPeerSet.current = true; // this enambling the peer to be set only once
        
        let myPeer;

        (async function initPeer() {
            myPeer = new (await import('peerjs')).default() // this is to setup the peer connection for the user
            setPeer(myPeer)

            myPeer.on('open', (id) => {
                console.log(`your peer id is ${id}`)
                setMyId(id) //this is the id of user that is generated by peerjs 
                console.log("Printing the room id before sending it to the backend=",roomId)
                socket?.emit('Peer-joined-room', roomId, id)
            })
        })()
    }, [roomId, socket])

    return {
        peer,
        myId
    }
}

export default usePeer;